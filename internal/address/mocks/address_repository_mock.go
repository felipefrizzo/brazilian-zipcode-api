// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/felipefrizzo/brazilian-zipcode-api/internal/address (interfaces: AddressRepository)
//
// Generated by this command:
//
//	mockgen -destination=internal/address/mocks/address_repository_mock.go -package=mocks github.com/felipefrizzo/brazilian-zipcode-api/internal/address AddressRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	address "github.com/felipefrizzo/brazilian-zipcode-api/internal/address"
	gomock "go.uber.org/mock/gomock"
)

// MockAddressRepository is a mock of AddressRepository interface.
type MockAddressRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAddressRepositoryMockRecorder
	isgomock struct{}
}

// MockAddressRepositoryMockRecorder is the mock recorder for MockAddressRepository.
type MockAddressRepositoryMockRecorder struct {
	mock *MockAddressRepository
}

// NewMockAddressRepository creates a new mock instance.
func NewMockAddressRepository(ctrl *gomock.Controller) *MockAddressRepository {
	mock := &MockAddressRepository{ctrl: ctrl}
	mock.recorder = &MockAddressRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAddressRepository) EXPECT() *MockAddressRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockAddressRepository) Delete(ctx context.Context, zipcode string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, zipcode)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAddressRepositoryMockRecorder) Delete(ctx, zipcode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAddressRepository)(nil).Delete), ctx, zipcode)
}

// Get mocks base method.
func (m *MockAddressRepository) Get(ctx context.Context, zipcode string) (*address.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, zipcode)
	ret0, _ := ret[0].(*address.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAddressRepositoryMockRecorder) Get(ctx, zipcode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAddressRepository)(nil).Get), ctx, zipcode)
}

// Save mocks base method.
func (m *MockAddressRepository) Save(ctx context.Context, arg1 *address.Address, zipcode string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, arg1, zipcode)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockAddressRepositoryMockRecorder) Save(ctx, arg1, zipcode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockAddressRepository)(nil).Save), ctx, arg1, zipcode)
}
