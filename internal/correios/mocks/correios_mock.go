// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/felipefrizzo/brazilian-zipcode-api/internal/correios (interfaces: Correios)
//
// Generated by this command:
//
//	mockgen -destination=internal/correios/mocks/correios_mock.go -package=mocks github.com/felipefrizzo/brazilian-zipcode-api/internal/correios Correios
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	address "github.com/felipefrizzo/brazilian-zipcode-api/internal/address"
	gomock "go.uber.org/mock/gomock"
)

// MockCorreios is a mock of Correios interface.
type MockCorreios struct {
	ctrl     *gomock.Controller
	recorder *MockCorreiosMockRecorder
	isgomock struct{}
}

// MockCorreiosMockRecorder is the mock recorder for MockCorreios.
type MockCorreiosMockRecorder struct {
	mock *MockCorreios
}

// NewMockCorreios creates a new mock instance.
func NewMockCorreios(ctrl *gomock.Controller) *MockCorreios {
	mock := &MockCorreios{ctrl: ctrl}
	mock.recorder = &MockCorreiosMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCorreios) EXPECT() *MockCorreiosMockRecorder {
	return m.recorder
}

// GetAddressByZipcode mocks base method.
func (m *MockCorreios) GetAddressByZipcode(ctx context.Context, zipcode string) (*address.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddressByZipcode", ctx, zipcode)
	ret0, _ := ret[0].(*address.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddressByZipcode indicates an expected call of GetAddressByZipcode.
func (mr *MockCorreiosMockRecorder) GetAddressByZipcode(ctx, zipcode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressByZipcode", reflect.TypeOf((*MockCorreios)(nil).GetAddressByZipcode), ctx, zipcode)
}
